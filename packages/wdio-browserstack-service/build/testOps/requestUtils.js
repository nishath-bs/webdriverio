import { DATA_ENDPOINT, DATA_EVENT_ENDPOINT, DATA_SCREENSHOT_ENDPOINT, TESTOPS_BUILD_COMPLETED_ENV, BROWSERSTACK_TESTHUB_JWT } from '../constants.js';
import { BStackLogger } from '../bstackLogger.js';
import { DEFAULT_REQUEST_CONFIG, getLogTag } from '../util.js';
import got from 'got';
export async function uploadEventData(eventData, eventUrl = DATA_EVENT_ENDPOINT) {
    let logTag = 'BATCH_UPLOAD';
    if (!Array.isArray(eventData)) {
        logTag = getLogTag(eventData.event_type);
    }
    if (eventUrl === DATA_SCREENSHOT_ENDPOINT) {
        logTag = 'screenshot_upload';
    }
    if (!process.env[TESTOPS_BUILD_COMPLETED_ENV]) {
        throw new Error('Build start not completed yet');
    }
    if (!process.env[BROWSERSTACK_TESTHUB_JWT]) {
        BStackLogger.debug(`[${logTag}] Missing Authentication Token/ Build ID`);
        throw new Error('Token/buildID is undefined, build creation might have failed');
    }
    try {
        const url = `${DATA_ENDPOINT}/${eventUrl}`;
        const data = await got.post(url, {
            agent: DEFAULT_REQUEST_CONFIG.agent,
            headers: {
                ...DEFAULT_REQUEST_CONFIG.headers,
                'Authorization': `Bearer ${process.env[BROWSERSTACK_TESTHUB_JWT]}`
            },
            json: eventData
        }).json();
        BStackLogger.debug(`[${logTag}] Success response: ${JSON.stringify(data)}`);
    }
    catch (error) {
        BStackLogger.debug(`[${logTag}] Failed. Error: ${error}`);
        throw new Error('Request failed with exception: ' + error);
    }
}
export function sendScreenshots(eventData) {
    return uploadEventData(eventData, DATA_SCREENSHOT_ENDPOINT);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdFV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rlc3RPcHMvcmVxdWVzdFV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDSCxhQUFhLEVBQ2IsbUJBQW1CLEVBQ25CLHdCQUF3QixFQUN4QiwyQkFBMkIsRUFBRSx3QkFBd0IsRUFDeEQsTUFBTSxpQkFBaUIsQ0FBQTtBQUN4QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFDakQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFNBQVMsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUM5RCxPQUFPLEdBQUcsTUFBTSxLQUFLLENBQUE7QUFFckIsTUFBTSxDQUFDLEtBQUssVUFBVSxlQUFlLENBQUUsU0FBeUMsRUFBRSxXQUFtQixtQkFBbUI7SUFDcEgsSUFBSSxNQUFNLEdBQVcsY0FBYyxDQUFBO0lBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7UUFDNUIsTUFBTSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDNUMsQ0FBQztJQUVELElBQUksUUFBUSxLQUFLLHdCQUF3QixFQUFFLENBQUM7UUFDeEMsTUFBTSxHQUFHLG1CQUFtQixDQUFBO0lBQ2hDLENBQUM7SUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxFQUFFLENBQUM7UUFDNUMsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFBO0lBQ3BELENBQUM7SUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLENBQUM7UUFDekMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sMENBQTBDLENBQUMsQ0FBQTtRQUN4RSxNQUFNLElBQUksS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUE7SUFDbkYsQ0FBQztJQUVELElBQUksQ0FBQztRQUNELE1BQU0sR0FBRyxHQUFHLEdBQUcsYUFBYSxJQUFJLFFBQVEsRUFBRSxDQUFBO1FBQzFDLE1BQU0sSUFBSSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDN0IsS0FBSyxFQUFFLHNCQUFzQixDQUFDLEtBQUs7WUFDbkMsT0FBTyxFQUFFO2dCQUNMLEdBQUcsc0JBQXNCLENBQUMsT0FBTztnQkFDakMsZUFBZSxFQUFFLFVBQVUsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFO2FBQ3JFO1lBQ0QsSUFBSSxFQUFFLFNBQVM7U0FDbEIsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBO1FBQ1QsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sdUJBQXVCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQy9FLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2IsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sb0JBQW9CLEtBQUssRUFBRSxDQUFDLENBQUE7UUFDekQsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsR0FBRyxLQUFLLENBQUMsQ0FBQTtJQUM5RCxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsU0FBNEI7SUFDeEQsT0FBTyxlQUFlLENBQUMsU0FBUyxFQUFFLHdCQUF3QixDQUFDLENBQUE7QUFDL0QsQ0FBQyJ9