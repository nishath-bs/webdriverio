import { BROWSERSTACK_PERCY, BROWSERSTACK_OBSERVABILITY, BROWSERSTACK_ACCESSIBILITY } from '../constants.js';
import { BStackLogger } from '../bstackLogger.js';
import { isTrue } from '../util.js';
export const getProductMap = (config) => {
    return {
        'observability': config.testObservability.enabled,
        'accessibility': config.accessibility,
        'percy': config.percy,
        'automate': config.automate,
        'app_automate': config.appAutomate
    };
};
export const shouldProcessEventForTesthub = (eventType) => {
    if (isTrue(process.env[BROWSERSTACK_OBSERVABILITY])) {
        return true;
    }
    if (isTrue(process.env[BROWSERSTACK_ACCESSIBILITY])) {
        return !(['HookRunStarted', 'HookRunFinished', 'LogCreated'].includes(eventType));
    }
    if (isTrue(process.env[BROWSERSTACK_PERCY]) && eventType) {
        return false;
    }
    return Boolean(process.env[BROWSERSTACK_ACCESSIBILITY] || process.env[BROWSERSTACK_OBSERVABILITY] || process.env[BROWSERSTACK_PERCY]);
};
export const handleErrorForObservability = (error) => {
    process.env[BROWSERSTACK_OBSERVABILITY] = 'false';
    logBuildError(error, 'observability');
};
export const handleErrorForAccessibility = (error) => {
    process.env[BROWSERSTACK_ACCESSIBILITY] = 'false';
    logBuildError(error, 'accessibility');
};
export const logBuildError = (error, product = '') => {
    if (!error || !error.errors) {
        BStackLogger.error(`${product.toUpperCase()} Build creation failed ${error}`);
        return;
    }
    for (const errorJson of error.errors) {
        const errorType = errorJson.key;
        const errorMessage = errorJson.message;
        if (errorMessage) {
            switch (errorType) {
                case 'ERROR_INVALID_CREDENTIALS':
                    BStackLogger.error(errorMessage);
                    break;
                case 'ERROR_ACCESS_DENIED':
                    BStackLogger.info(errorMessage);
                    break;
                case 'ERROR_SDK_DEPRECATED':
                    BStackLogger.error(errorMessage);
                    break;
                default:
                    BStackLogger.error(errorMessage);
            }
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGVzdEh1Yi91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsMEJBQTBCLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUU1RyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFDakQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUVuQyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxNQUEwQixFQUFPLEVBQUU7SUFDN0QsT0FBTztRQUNILGVBQWUsRUFBRSxNQUFNLENBQUMsaUJBQWlCLENBQUMsT0FBTztRQUNqRCxlQUFlLEVBQUUsTUFBTSxDQUFDLGFBQWE7UUFDckMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxLQUFLO1FBQ3JCLFVBQVUsRUFBRSxNQUFNLENBQUMsUUFBUTtRQUMzQixjQUFjLEVBQUUsTUFBTSxDQUFDLFdBQVc7S0FDckMsQ0FBQTtBQUNMLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLENBQUMsU0FBaUIsRUFBVyxFQUFFO0lBQ3ZFLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbEQsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0lBQ0QsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNsRCxPQUFPLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO0lBQ3JGLENBQUM7SUFDRCxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUN2RCxPQUFPLEtBQUssQ0FBQTtJQUNoQixDQUFDO0lBQ0QsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUUsQ0FBQTtBQUMxSSxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxDQUFDLEtBQVUsRUFBUSxFQUFFO0lBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsR0FBRyxPQUFPLENBQUE7SUFDakQsYUFBYSxDQUFDLEtBQUssRUFBRSxlQUFlLENBQUMsQ0FBQTtBQUN6QyxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxDQUFDLEtBQVUsRUFBUSxFQUFFO0lBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsR0FBRyxPQUFPLENBQUE7SUFDakQsYUFBYSxDQUFDLEtBQUssRUFBRSxlQUFlLENBQUMsQ0FBQTtBQUN6QyxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxLQUFVLEVBQUUsVUFBa0IsRUFBRSxFQUFRLEVBQUU7SUFDcEUsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMxQixZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSwwQkFBMEIsS0FBTSxFQUFFLENBQUMsQ0FBQTtRQUM5RSxPQUFNO0lBQ1YsQ0FBQztJQUVELEtBQUssTUFBTSxTQUFTLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ25DLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUE7UUFDL0IsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQTtRQUN0QyxJQUFJLFlBQVksRUFBRSxDQUFDO1lBQ2YsUUFBUSxTQUFTLEVBQUUsQ0FBQztnQkFDcEIsS0FBSywyQkFBMkI7b0JBQzVCLFlBQVksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUE7b0JBQ2hDLE1BQUs7Z0JBQ1QsS0FBSyxxQkFBcUI7b0JBQ3RCLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7b0JBQy9CLE1BQUs7Z0JBQ1QsS0FBSyxzQkFBc0I7b0JBQ3ZCLFlBQVksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUE7b0JBQ2hDLE1BQUs7Z0JBQ1Q7b0JBQ0ksWUFBWSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTtZQUNwQyxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7QUFDTCxDQUFDLENBQUEifQ==