import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
const { version: bstackServiceVersion } = require('../package.json');
export const BROWSER_DESCRIPTION = [
    'device',
    'os',
    'osVersion',
    'os_version',
    'browserName',
    'browser',
    'browserVersion',
    'browser_version'
];
export const VALID_APP_EXTENSION = [
    '.apk',
    '.aab',
    '.ipa'
];
export const DEFAULT_OPTIONS = {
    setSessionName: true,
    setSessionStatus: true,
    testObservability: true,
    accessibility: false
};
export const consoleHolder = Object.assign({}, console);
export const DATA_ENDPOINT = 'https://collector-observability.browserstack.com';
export const APP_ALLY_ENDPOINT = 'https://app-accessibility.browserstack.com/automate';
export const APP_ALLY_ISSUES_ENDPOINT = 'api/v1/issues';
export const APP_ALLY_ISSUES_SUMMARY_ENDPOINT = 'api/v1/issues-summary';
export const DATA_EVENT_ENDPOINT = 'api/v1/event';
export const DATA_BATCH_ENDPOINT = 'api/v1/batch';
export const DATA_SCREENSHOT_ENDPOINT = 'api/v1/screenshots';
export const DATA_BATCH_SIZE = 1000;
export const DATA_BATCH_INTERVAL = 2000;
export const BATCH_EVENT_TYPES = ['LogCreated', 'TestRunStarted', 'TestRunFinished', 'HookRunFinished', 'HookRunStarted', 'ScreenshotCreated'];
export const DEFAULT_WAIT_TIMEOUT_FOR_PENDING_UPLOADS = 5000; // 5s
export const DEFAULT_WAIT_INTERVAL_FOR_PENDING_UPLOADS = 100; // 100ms
export const BSTACK_SERVICE_VERSION = bstackServiceVersion;
export const NOT_ALLOWED_KEYS_IN_CAPS = ['includeTagsInTestingScope', 'excludeTagsInTestingScope'];
export const LOGS_FILE = 'logs/bstack-wdio-service.log';
export const UPLOAD_LOGS_ADDRESS = 'https://upload-observability.browserstack.com';
export const UPLOAD_LOGS_ENDPOINT = 'client-logs/upload';
export const PERCY_LOGS_FILE = 'logs/percy.log';
export const PERCY_DOM_CHANGING_COMMANDS_ENDPOINTS = [
    '/session/:sessionId/url',
    '/session/:sessionId/forward',
    '/session/:sessionId/back',
    '/session/:sessionId/refresh',
    '/session/:sessionId/screenshot',
    '/session/:sessionId/actions',
    '/session/:sessionId/appium/device/shake'
];
export const CAPTURE_MODES = ['click', 'auto', 'screenshot', 'manual', 'testcase'];
export const LOG_KIND_USAGE_MAP = {
    'TEST_LOG': 'log',
    'TEST_SCREENSHOT': 'screenshot',
    'TEST_STEP': 'step',
    'HTTP': 'http'
};
export const FUNNEL_INSTRUMENTATION_URL = 'https://api.browserstack.com/sdk/v1/event';
export const SUPPORTED_BROWSERS_FOR_AI = ['chrome', 'microsoftedge', 'firefox'];
export const TCG_URL = 'https://tcg.browserstack.com';
export const TCG_INFO = {
    tcgRegion: 'use',
    tcgUrl: TCG_URL,
};
// Env variables - Define all the env variable constants over here
// To store the JWT token returned the session launch
export const BROWSERSTACK_TESTHUB_JWT = 'BROWSERSTACK_TESTHUB_JWT';
// To store tcg auth result for selfHealing feature:
export const BSTACK_TCG_AUTH_RESULT = 'BSTACK_TCG_AUTH_RESULT';
// To store the setting of whether to send screenshots or not
export const TESTOPS_SCREENSHOT_ENV = 'BS_TESTOPS_ALLOW_SCREENSHOTS';
// To store build hashed id
export const BROWSERSTACK_TESTHUB_UUID = 'BROWSERSTACK_TESTHUB_UUID';
// To store test run uuid
export const TEST_ANALYTICS_ID = 'TEST_ANALYTICS_ID';
// Whether to collect performance instrumentation or not
export const PERF_MEASUREMENT_ENV = 'BROWSERSTACK_O11Y_PERF_MEASUREMENT';
// Whether the current run is rerun or not
export const RERUN_TESTS_ENV = 'BROWSERSTACK_RERUN_TESTS';
// The tests that needs to be rerun
export const RERUN_ENV = 'BROWSERSTACK_RERUN';
// To store whether the build launch has completed or not
export const TESTOPS_BUILD_COMPLETED_ENV = 'BS_TESTOPS_BUILD_COMPLETED';
// Whether percy has started successfully or not
export const BROWSERSTACK_PERCY = 'BROWSERSTACK_PERCY';
export const BSTACK_A11Y_POLLING_TIMEOUT = 'BSTACK_A11Y_POLLING_TIMEOUT';
// Whether session is a accessibility session
export const BROWSERSTACK_ACCESSIBILITY = 'BROWSERSTACK_ACCESSIBILITY';
// Whether session is a observability session
export const BROWSERSTACK_OBSERVABILITY = 'BROWSERSTACK_OBSERVABILITY';
// Maximum size of VCS info which is allowed
export const MAX_GIT_META_DATA_SIZE_IN_BYTES = 64 * 1024;
/* The value to be appended at the end if git metadata is larger than
MAX_GIT_META_DATA_SIZE_IN_BYTES
*/
export const GIT_META_DATA_TRUNCATED = '...[TRUNCATED]';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQzNDLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzlDLE1BQU0sRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtBQUVwRSxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRztJQUMvQixRQUFRO0lBQ1IsSUFBSTtJQUNKLFdBQVc7SUFDWCxZQUFZO0lBQ1osYUFBYTtJQUNiLFNBQVM7SUFDVCxnQkFBZ0I7SUFDaEIsaUJBQWlCO0NBQ1gsQ0FBQTtBQUVWLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHO0lBQy9CLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtDQUNULENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQWdDO0lBQ3hELGNBQWMsRUFBRSxJQUFJO0lBQ3BCLGdCQUFnQixFQUFFLElBQUk7SUFDdEIsaUJBQWlCLEVBQUUsSUFBSTtJQUN2QixhQUFhLEVBQUUsS0FBSztDQUN2QixDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFtQixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQTtBQUV2RSxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsa0RBQWtELENBQUE7QUFDL0UsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcscURBQXFELENBQUE7QUFDdEYsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsZUFBZSxDQUFBO0FBQ3ZELE1BQU0sQ0FBQyxNQUFNLGdDQUFnQyxHQUFHLHVCQUF1QixDQUFBO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFH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