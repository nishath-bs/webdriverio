import Transport from 'winston-transport';
import { consoleHolder } from './constants.js';
const LOG_LEVELS = {
    INFO: 'INFO',
    ERROR: 'ERROR',
    DEBUG: 'DEBUG',
    TRACE: 'TRACE',
    WARN: 'WARN',
};
class logReportingAPI extends Transport {
    log(info, callback = undefined) {
        setImmediate(() => {
            this.emit('logged', info);
        });
        if (typeof (info) === 'object') {
            /* From log appender */
            this.logToTestOps(info.level || LOG_LEVELS.INFO, info.message, false);
        }
        else {
            /* From default console */
            this.logToTestOps(LOG_LEVELS.INFO, info);
        }
        if (callback && typeof callback === 'function') {
            callback();
        }
    }
    logToTestOps = (level = LOG_LEVELS.INFO, message = '', consoleLog = true) => {
        if (consoleLog) {
            consoleHolder[level.toLowerCase()](message);
        }
        process.emit(`bs:addLog:${process.pid}`, {
            timestamp: new Date().toISOString(),
            level: level.toUpperCase(),
            message: message,
            kind: 'TEST_LOG',
            http_response: {}
        });
    };
    /* Patching this would show user an extended trace on their cli */
    trace = (message) => {
        this.logToTestOps(LOG_LEVELS.TRACE, message);
    };
    debug = (message) => {
        this.logToTestOps(LOG_LEVELS.DEBUG, message);
    };
    info = (message) => {
        this.logToTestOps(LOG_LEVELS.INFO, message);
    };
    warn = (message) => {
        this.logToTestOps(LOG_LEVELS.WARN, message);
    };
    error = (message) => {
        this.logToTestOps(LOG_LEVELS.ERROR, message);
    };
}
export default logReportingAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nUmVwb3J0aW5nQVBJLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xvZ1JlcG9ydGluZ0FQSS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFNBQVMsTUFBTSxtQkFBbUIsQ0FBQTtBQUN6QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFFOUMsTUFBTSxVQUFVLEdBQUc7SUFDZixJQUFJLEVBQUUsTUFBTTtJQUNaLEtBQUssRUFBRSxPQUFPO0lBQ2QsS0FBSyxFQUFFLE9BQU87SUFDZCxLQUFLLEVBQUUsT0FBTztJQUNkLElBQUksRUFBRSxNQUFNO0NBQ2YsQ0FBQTtBQUVELE1BQU0sZUFBZ0IsU0FBUSxTQUFTO0lBQ25DLEdBQUcsQ0FBQyxJQUFTLEVBQUUsV0FBK0IsU0FBUztRQUNuRCxZQUFZLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDN0IsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLE9BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUM1Qix1QkFBdUI7WUFDdkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUN6RSxDQUFDO2FBQU0sQ0FBQztZQUNKLDBCQUEwQjtZQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDNUMsQ0FBQztRQUVELElBQUksUUFBUSxJQUFJLE9BQU8sUUFBUSxLQUFLLFVBQVUsRUFBRSxDQUFDO1lBQzdDLFFBQVEsRUFBRSxDQUFBO1FBQ2QsQ0FBQztJQUNMLENBQUM7SUFFRCxZQUFZLEdBQUcsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLElBQUksRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFFLFVBQVUsR0FBRyxJQUFJLEVBQUUsRUFBRTtRQUN4RSxJQUFJLFVBQVUsRUFBRSxDQUFDO1lBQ1osYUFBcUIsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUN4RCxDQUFDO1FBQ0EsT0FBTyxDQUFDLElBQWlCLENBQUMsYUFBYSxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDbkQsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO1lBQ25DLEtBQUssRUFBRSxLQUFLLENBQUMsV0FBVyxFQUFFO1lBQzFCLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLElBQUksRUFBRSxVQUFVO1lBQ2hCLGFBQWEsRUFBRSxFQUFFO1NBQ3BCLENBQUMsQ0FBQTtJQUNOLENBQUMsQ0FBQTtJQUVELGtFQUFrRTtJQUNsRSxLQUFLLEdBQUcsQ0FBQyxPQUFZLEVBQUUsRUFBRTtRQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDaEQsQ0FBQyxDQUFBO0lBRUQsS0FBSyxHQUFHLENBQUMsT0FBWSxFQUFFLEVBQUU7UUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ2hELENBQUMsQ0FBQTtJQUVELElBQUksR0FBRyxDQUFDLE9BQVksRUFBRSxFQUFFO1FBQ3BCLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUMvQyxDQUFDLENBQUE7SUFFRCxJQUFJLEdBQUcsQ0FBQyxPQUFZLEVBQUUsRUFBRTtRQUNwQixJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDL0MsQ0FBQyxDQUFBO0lBRUQsS0FBSyxHQUFHLENBQUMsT0FBWSxFQUFFLEVBQUU7UUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ2hELENBQUMsQ0FBQTtDQUNKO0FBRUQsZUFBZSxlQUFlLENBQUEifQ==